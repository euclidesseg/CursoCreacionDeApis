					Instructions Apis witch .net
					============================
----------------QUE ES UNA API
----------------Es una forma sencilla en que los programas o sitios web inercambian datos.
----------------los datos que se intercambian son cais siempre JSON o XML
	      
   LLAMADAS A UNA API
============================
----------------Las llamdas a una api se representan mediante peticiones http
----------------En las que la URL representa el recurso 
----------------El metodo http representa la operacion que viene acompañada de un verbo o metodo (GET http:/)
----------------El codigo del estado representa el resultado 200 ok 404 not found

	      
   ONION ACHITECTURE
============================
----------------Inversion de Control
----------------Se refiere a todo a quel diseño de software cuyo poroposito obedece a la 
----------------Necesidad de querer controlar el flujo de ejecucion de este

  INYECCION DE DEPENDENCIAS
============================
----------------Es un patron de diseño que sirve para inyectar componentes a las clases que ya tenemos implementadas
----------------esos componentes son contratos que necesitan nuestras clases para poder funcionar de ahi el concepto
----------------de dependencias, nuestras clases no crearan esos objetos que necesitan, si no que se le sumistrara
----------------otra clase contenedora pertenciente al framework DI que estamos utilizando.


  CAPAS DE ONION ACHITECTURE
============================
----------------CAPA DE DOMINIO
----------------Este es el centro de nuestra arquitectura, no tienen ningun tipo de dependencias, son planos sin 
----------------una logica codigo

----------------SERVICIOS DE DOMINIO
----------------Define las interfaces necesarios para poder almacenas y recuperar objetos
----------------Podemos convertir esta definicion en una definicion de patron repository
----------------Este tipo de comportamiento tiene su implementacion en la capa mas alejada del centro 
----------------nombrada infraestructura

----------------SERVICIOS DE APLICACION
----------------Tiene la funcion de abrir la puerta al corazon de la arquitectura, el sistrma central esta compuesto
----------------por tres aros DOMINIO, SERVIVCIOS DE DOMINIO Y SERVICIOS DE APLICACON

----------------INFRAESTRUCTURA Y PRUEBAS UI
----------------Esta es para componentes que cambian con frecuencias aqui es donde vive la interfaz con todas
----------------sus vistas, controladores y todo lo relacionado con la logica de presntacion

  IMPLEMENTACIOND DE LA ONION ARQUITECTURE EN UN PROYECTO
=========================================================
----------------Creamos la solucion en blanco
----------------Dentro de la solucion creamos una carpeta llamada source o src
----------------dentro de ella creamos 3 carpeta 	Core, Infraestructure, Presentation

----------------Dentro de Core creamos dos proyectos de biblioteca de clases Aplication y Domain
----------------Dentro de infraestructure creamos Dos proyectos de bibliotecas de clases Persistance y Shared
----------------Dentro de Presentacion creamos el proyecto de la api llamado WebApi


  PATRONES DE DESARROLLO
========================
---------------- CQRS 
----------------El enfoque principal es separar la forma de leer y escribir datos
----------------Peremite generara consulta mas sencillas

----------------Mediator
----------------Permite reducir las dependencias caoticas ente objetos 
----------------Como resultado los componentes dependen solo de una unica clase de mediador en lugar de estar 
----------------acoplados a decenas de sus colegas



====================================================================
		CONFIGURANDO CAPA DE APLICACION
====================================================================
----------------Primero descargamos un paquete nuget para la WebApi llamado   Contract
				se utiliza para implementar el patrón de diseño Mediator en aplicaciones .NET
				permite que varias clases o componentes de una aplicación se comuniquen entre sí 
				de manera que no se conozcan mutuamente
----------------Descargamos otro paquete nuget esta vez para la capa aplicacion que esta en la carpeta Core.
----------------llamado MediatR.Extensions.Microsoft.DependencyInyection
				paquete de Nuget que proporciona integración con el contenedor de inyección de dependencias (DI) de Microsoft.
				Permite configurar y registrar MediatR y sus dependencias en el contenedor de DI de Microsoft,
				lo que facilita la creación y uso de instancias de MediatR en aplicaciones .NET que utilizan DI.

----------------Descargamos AutoMapper.Extencion.Dependency y AutoMapper en la capa aplication
				AutoMapper.DependencyInjection es un paquete de Nuget que proporciona integración
				con el contenedor de inyección de dependencias
				AutoMapper es una librería de .NET que se utiliza para hacer mapeos entre diferentes 
				tipos de objetos de manera sencilla y rápida. para tener algunos campos de un objeto en otro
----------------Descargamos FluentValidation nuget que nos permite hacer validaciones con reglas fuertemente tipadas
				la descargamos en aplications

----------------Dentro de la capa aplication creamos las siguientes carpetas Behaviours, DTOs, Exceptions, Feautures, 
				Filters, Interfaces, Mappings, Wrappers
				Por ultimo creamos una clase llamada ServicesExtensions ??????????
				Esta clase nos permite agrupar las inyecciones o matriculas de terceros o las propias que hagamos nosotros
				Configuramos la clase tal cual como se esta y de esta manera todo se centra en el Core

				De esta manera la capa infraestructura y la capa presentacion dependen del Core que es donde se encuentra el
				Domain corazon de la aplicacion, el dominio no depende de nadie

----------------Generalmente si tuvieramos solo WebApi matriculariamos servicios en en StartApp pero como en este caso es diferente
----------------Devemos agregar referencias al proyecto aplicacion desde la WebApi
----------------Devido a que la clase starup ya no esta hacemos un using de la capa aplicacion en program.cs
----------------builder.Services.AddaplicationLayer();
----------------de esta manera todos los servicios que yo matricule en ServiceExtensions cuando haga una referencia a 
----------------AplicationLayer automaticamente seran reflejados en esa biblioteca de clases


  PIPELINE O MIDDLEWARE PARA EL MANEJO DE EXCEPCIONES
======================================================
----------------Cuando enviamos una solicitud a una pagina web y el servidor nos debuelve una respuesta estas dos, tanto como
----------------Solicitudes y respuestas viajan atravez de Pipeline es decir, el Pipeline es un canal la request del usuario
----------------y la response del servidor generalmente se conoce como MIDELWARE
----------------Las validaciones de las request se hacen cuando entran al servidor Comenzemos a realizar estas validaciones

----------------Para hacer validaciones de ese canal vamos a la carpeta Behaviours a generar una clase llamada ValidationBehaviours 
----------------Esta se encargara de la validacion del Pipeline o Midelware

----------------La clase ValidationBehaviours resibe dos tipos Trequest, TResponse(peticion y respuesta) luego implementa una interfaz
----------------IPipelineBehavior<Trequest, TResponse> que tiene los mismos datos donde el TRequest es de tipo IRequest y saca un TResponse
----------------Y esta clase nos proporsiona un metodo Handle.

----------------Cuando usamos mediador Necesitamos un manejador para canalizar todas las peticiones 
----------------rivate readonly IEnumerable<IValidator<Trequest>> _validators;

=================================================================================
				Hasta el momento hemos configurado las clases ServicesExtensions
				esta primera clase esta utilizando el patrón de diseño de inversión de dependencias DI
				atravez de servicios: Los servicios son componentes que se pueden inyectar
				en otras partes de la aplicación y
				que proporcionan ciertas funcionalidades.

				la clase ValidatorBehaviours 
				En esta clase se recepcionaran las peticiones del cliente

				y la clase Validation exceptions en esta clase se configuran 
				las excepciones para que las tome la clase ValidatorBehaviours
				En caso de hallar errores en las peticiones
=================================================================================


	CREANDO NUESTRA PRIMER ENTIDAD DE DOMINIO
==============================================
----------------Las entidades de dominio son clases que representan 
----------------a los objetos del negocio y se utilizan para almacenar y recuperar datos de la base de datos
----------------se compone de propiedades que representan los campos de la tabla de la base de datos
----------------y puede tener también relaciones con otras entidades de dominio.

----------------En Domain creamos una carpeta llamada Entities y una llamada Common, dentro de Common creamos una clase llamada 
----------------AuditableBaseEntity esta clase sera abstracta porque sera la entidad base para las demas entidades que iran dentro de entities
----------------Dentro de entities creamos la clase cliente esta entidad es la primera que heredara de la clase abstracta


	IMPLEMENTACION DE UNA PERSISTENCIA
==============================================
----------------Ahora trabajaremos con la biblioteca infraestructura 
----------------La persistencia se refiere a la capacidad de un sistema de almacenar y mantener datos a largo plazo
----------------dentro de la biblioteca de clases agregamos la carpeta de de Contexts esta carpeta tendran nuestros DbContexts
----------------DbContext es una clase de Entity Framework que se utiliza como la principal
----------------herramienta de trabajo para manipular datos en una base de datos desde una aplicación .NET
----------------Esta clase es propia del frameowork .net

----------------Luego de configurar la clase AplicationDbContex descargamos lo siguiente
----------------En la biblioteca aplicacion instalamos el paquete nuguet Ardalis.Specification
----------------este paquete implementa el patron repositorio y en la persistencia agregamos
----------------Ardalis.Specification.EntityFrameworkcor 

----------------Ahora para implementar el repositorio necesitamos crear una interfaz generica llamada IrepositoryAsync
----------------Ahora crearemos un repositorio en la persistenccia creamos una carpeta llamada repository y dentro de esta 
----------------la clase myrepository la cual va a heredar de Irepositoryasync